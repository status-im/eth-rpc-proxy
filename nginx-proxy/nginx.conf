worker_processes auto;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

env CONFIG_HEALTH_CHECKER_URL;

http {
    resolver 1.1.1.1 8.8.8.8 valid=300s ipv6=off;
    resolver_timeout 5s;
    lua_package_path "/usr/local/openresty/nginx/lua/?.lua;/usr/local/openresty/lualib/?.lua;;";

    lua_shared_dict providers 10m;
    client_body_buffer_size 10M;
    client_max_body_size 10M;

    init_worker_by_lua_block {
        local provider_loader = require("provider_loader")
        local schedule_reload_providers = provider_loader.schedule_reload_providers

        -- Read URL from environment variable
        local url = os.getenv("CONFIG_HEALTH_CHECKER_URL")
        local fallback = "/usr/local/openresty/nginx/providers.json"

        -- Check worker ID to ensure timers only run in one process
        if ngx.worker.id() == 0 then  -- Only in first worker
            ngx.log(ngx.ERR, "Starting reload_providers in worker: ", ngx.worker.id())

            -- Perform initial provider loading
            schedule_reload_providers(url, fallback)

            -- Start periodic reload
            local delay = 30
            local handler
            handler = function()
                schedule_reload_providers(url, fallback)
                local ok, err = ngx.timer.at(delay, handler)
                if not ok then
                    ngx.log(ngx.ERR, "Failed to create timer: ", err)
                end
            end

            local ok, err = ngx.timer.at(delay, handler)
            if not ok then
                ngx.log(ngx.ERR, "Failed to create initial timer: ", err)
            end
        else
            ngx.log(ngx.ERR, "Worker ", ngx.worker.id(), " is not starting reload_providers")
        end
    }

    server {
        listen 8080;
        # HTTP basic authentication
        auth_basic "Restricted Access";
        auth_basic_user_file /etc/nginx/.htpasswd;

        location / {
            lua_need_request_body on;
            content_by_lua_block {
                local json = require("cjson")
                local http = require("resty.http")

                -- Extract and validate chain and network from URL path
                local chain, network = ngx.var.uri:match("^/([^/]+)/([^/]+)")
                if not chain or not network then
                    ngx.log(ngx.ERR, "Invalid URL format - must be /chain/network")
                    ngx.status = 400
                    ngx.say("Invalid URL format - must be /chain/network")
                    return
                end
                ngx.log(ngx.ERR, "Chain: ", chain, " Network: ", network)

                -- Get providers for the requested chain/network
                local chain_network_key = chain .. ":" .. network
                local providers_str = ngx.shared.providers:get(chain_network_key)

                if not providers_str then
                    ngx.log(ngx.ERR, "No providers found for ", chain_network_key)
                    ngx.status = 404
                    ngx.say("No providers available for this chain/network")
                    return
                end
                local providers = json.decode(providers_str)
                local body_data = ngx.req.get_body_data()
                ngx.log(ngx.ERR, "Request body: ", body_data)

                if #providers == 0 then
                    ngx.log(ngx.ERR, "No providers found for ", chain_network_key)
                    ngx.status = 404
                    ngx.say("No providers available for this chain/network")
                    return
                end

                for _, provider in ipairs(providers) do
                    ngx.log(ngx.ERR, "provider: ", provider.url)
                    local httpc = http.new()

                    -- Handle authentication based on provider config
                    local request_url = provider.url
                    local request_headers = {
                        ["Content-Type"] = "application/json"
                    }

                    if provider.authType == "token-auth" and provider.authToken then
                        request_url = request_url .. "/" .. provider.authToken
                    elseif provider.authType == "basic-auth" and provider.authLogin and provider.authPassword then
                        local auth_str = ngx.encode_base64(provider.authLogin .. ":" .. provider.authPassword)
                        request_headers["Authorization"] = "Basic " .. auth_str
                    end

                    local res, err = httpc:request_uri(request_url, {
                        method = ngx.req.get_method(),
                        body = ngx.req.get_body_data(),
                        headers = request_headers,
                        ssl_verify = false,
                        options = { family = ngx.AF_INET }
                    })

                    if not res then
                        ngx.log(ngx.ERR, "HTTP request failed: ", err)
                    else
                        ngx.log(ngx.ERR, "Response body: ", res.body)
                        local ok, decoded_body = pcall(json.decode, res.body)
                        if ok then
                            ngx.say(json.encode(decoded_body))
                            return
                        else
                            ngx.log(ngx.ERR, "Failed to decode response: ", decoded_body)
                        end
                    end
                end

                ngx.status = 502
                ngx.say("All providers failed")
            }
        }
    }
}
