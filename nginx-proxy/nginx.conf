worker_processes auto;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

# Health-checker URL to get the latest provider list
env CONFIG_HEALTH_CHECKER_URL;
# custom local DNS servers to use for resolving the provider list
env CUSTOM_DNS;
# reload interval in seconds (grabs the latest provider list from CONFIG_HEALTH_CHECKER_URL)
env RELOAD_INTERVAL;
# Go Auth Service URL
env GO_AUTH_SERVICE_URL;
# Auth config file path
env AUTH_CONFIG_FILE;

http {
    resolver 1.1.1.1 8.8.8.8 valid=300s ipv6=off;
    resolver_timeout 5s;
    lua_package_path "/usr/local/openresty/nginx/lua/?.lua;/usr/local/openresty/lualib/?.lua;;";

    lua_shared_dict providers 10m;
    lua_shared_dict jwt_tokens 10m;  # Shared memory for JWT token validation
    client_body_buffer_size 10M;
    client_max_body_size 10M;

    access_log /dev/stdout;
    error_log /dev/stderr info;

    # Schedule periodic reload of the provider list
    init_worker_by_lua_file lua/init_worker.lua;

    server {
        listen 8080;

        # Auth endpoints - no authentication required, handled by Go service
        location /auth/ {
            set_by_lua_block $go_auth_service_url {
                local auth_config = require("auth_config")
                return auth_config.get_go_auth_service_url()
            }
            proxy_pass $go_auth_service_url;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Internal auth endpoint for JWT token validation (hybrid Lua + Go)
        location = /_auth_token {
            internal;
            content_by_lua_file lua/auth_token_validator.lua;
        }
                
        # Internal endpoint for Go service validation (called by Lua)
        location = /_auth_go_verify {
            internal;
            set_by_lua_block $go_auth_service_url {
                local auth_config = require("auth_config")
                return auth_config.get_go_auth_service_url()
            }
            proxy_pass $go_auth_service_url/auth/verify;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header Authorization $http_authorization;
        }

        # Health check endpoint
        location /stub_status {
            stub_status;
        }

        # Main RPC endpoints with hybrid authentication
        location / {
            lua_need_request_body on;
            
            # Hybrid authentication: satisfy either basic auth OR JWT token
            satisfy any;
            
            # 1) Basic Auth - .htpasswd
            auth_basic           "Restricted";
            auth_basic_user_file /etc/nginx/.htpasswd;
            
            # 2) Auth Request - JWT token
            auth_request         /_auth_token;
            
            # Serve the request using the provider list
            content_by_lua_file lua/request_handler.lua;
        }
    }
}
