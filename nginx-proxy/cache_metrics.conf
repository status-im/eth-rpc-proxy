# Prometheus metrics endpoint for Grafana - only accessible from internal networks  
location /metrics/cache {
    allow 172.16.0.0/12; allow 10.0.0.0/8; allow 127.0.0.1; deny all;
    access_log off;
    content_by_lua_block {
        -- Get cache dictionaries
        local dicts = {
            {ngx.shared.rpc_cache, "permanent"},
            {ngx.shared.rpc_cache_short, "short"},
            {ngx.shared.rpc_cache_minimal, "minimal"},
            {ngx.shared.providers, "providers"},
            {ngx.shared.jwt_tokens, "jwt_tokens"}
        }
        
        ngx.header["Content-Type"] = "text/plain; version=0.0.4"
        ngx.header["Cache-Control"] = "no-cache"
        
        -- Cache capacity/usage metrics
        for _, dict_info in ipairs(dicts) do
            local dict, cache_type = dict_info[1], dict_info[2]
            local used = dict:capacity() - dict:free_space()
            ngx.print(string.format([[
nginx_cache_capacity_bytes{cache_type="%s"} %d
nginx_cache_used_bytes{cache_type="%s"} %d
nginx_cache_free_bytes{cache_type="%s"} %d
nginx_cache_usage_percent{cache_type="%s"} %.2f
]], cache_type, dict:capacity(), cache_type, used, cache_type, dict:free_space(), cache_type, used / dict:capacity() * 100))
        end
        
        -- RPC cache totals
        local total_cap = ngx.shared.rpc_cache:capacity() + ngx.shared.rpc_cache_short:capacity() + ngx.shared.rpc_cache_minimal:capacity()
        local total_used = (ngx.shared.rpc_cache:capacity() - ngx.shared.rpc_cache:free_space()) + 
                          (ngx.shared.rpc_cache_short:capacity() - ngx.shared.rpc_cache_short:free_space()) +
                          (ngx.shared.rpc_cache_minimal:capacity() - ngx.shared.rpc_cache_minimal:free_space())
        
        ngx.print(string.format([[
nginx_cache_total_capacity_bytes %d
nginx_cache_total_used_bytes %d
]], total_cap, total_used))
        
        -- Hit/miss/request metrics
        local stats_dict = ngx.shared.cache_stats
        for _, cache_type in ipairs({"permanent", "short", "minimal", "all"}) do
            local req_key = cache_type == "all" and "total_requests_all" or "total_requests_" .. cache_type
            ngx.print(string.format([[
nginx_cache_hits_total{cache_type="%s"} %d
nginx_cache_misses_total{cache_type="%s"} %d
nginx_cache_requests_total{cache_type="%s"} %d
]], 
                cache_type, stats_dict:get("cache_hits_" .. cache_type) or 0,
                cache_type, stats_dict:get("cache_misses_" .. cache_type) or 0,
                cache_type, stats_dict:get(req_key) or 0))
        end
        
        -- Hit rates
        for _, cache_type in ipairs({"permanent", "short", "minimal", "all"}) do
            local hits = stats_dict:get("cache_hits_" .. cache_type) or 0
            local total = stats_dict:get(cache_type == "all" and "total_requests_all" or "total_requests_" .. cache_type) or 0
            local rate = total > 0 and (hits / total * 100) or 0
            ngx.print(string.format('nginx_cache_hit_rate{cache_type="%s"} %.2f\n', cache_type, rate))
        end
    }
} 