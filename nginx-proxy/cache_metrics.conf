# Cache statistics endpoint - only accessible from internal networks
location /cache_stats {
    # Allow access only from Docker internal networks and localhost
    allow 172.16.0.0/12;  # Docker networks
    allow 10.0.0.0/8;     # Private networks
    allow 127.0.0.1;      # Localhost
    deny all;             # Deny everything else
    
    access_log off;
    content_by_lua_block {
        local json = require("cjson")
        
        -- Get cache dictionaries
        local rpc_cache = ngx.shared.rpc_cache
        local rpc_cache_short = ngx.shared.rpc_cache_short
        local providers = ngx.shared.providers
        local jwt_tokens = ngx.shared.jwt_tokens
        
        -- Helper function to get cache stats
        local function get_cache_stats(cache_dict, name)
            return {
                name = name,
                capacity_mb = math.floor(cache_dict:capacity() / 1024 / 1024 * 100) / 100,
                free_space_mb = math.floor(cache_dict:free_space() / 1024 / 1024 * 100) / 100,
                used_space_mb = math.floor((cache_dict:capacity() - cache_dict:free_space()) / 1024 / 1024 * 100) / 100,
                usage_percent = math.floor((cache_dict:capacity() - cache_dict:free_space()) / cache_dict:capacity() * 10000) / 100
            }
        end
        
        -- Get cache hit/miss statistics
        local cache_stats_dict = ngx.shared.cache_stats
        local cache_performance = {
            cache_hits_permanent = cache_stats_dict:get("cache_hits_permanent") or 0,
            cache_misses_permanent = cache_stats_dict:get("cache_misses_permanent") or 0,
            cache_hits_short = cache_stats_dict:get("cache_hits_short") or 0,
            cache_misses_short = cache_stats_dict:get("cache_misses_short") or 0,
            cache_hits_total = cache_stats_dict:get("cache_hits_total") or 0,
            cache_misses_total = cache_stats_dict:get("cache_misses_total") or 0,
            total_requests_permanent = cache_stats_dict:get("total_requests_permanent") or 0,
            total_requests_short = cache_stats_dict:get("total_requests_short") or 0,
            total_requests_all = cache_stats_dict:get("total_requests_all") or 0
        }
        
        -- Calculate hit rates
        local hit_rate_permanent = cache_performance.total_requests_permanent > 0 
            and (cache_performance.cache_hits_permanent / cache_performance.total_requests_permanent * 100) or 0
        local hit_rate_short = cache_performance.total_requests_short > 0 
            and (cache_performance.cache_hits_short / cache_performance.total_requests_short * 100) or 0
        local hit_rate_total = cache_performance.total_requests_all > 0 
            and (cache_performance.cache_hits_total / cache_performance.total_requests_all * 100) or 0
        
        -- Collect stats
        local stats = {
            timestamp = ngx.time(),
            caches = {
                get_cache_stats(rpc_cache, "rpc_cache_permanent"),
                get_cache_stats(rpc_cache_short, "rpc_cache_short"),
                get_cache_stats(providers, "providers"),
                get_cache_stats(jwt_tokens, "jwt_tokens")
            },
            total_cache_memory_mb = math.floor((rpc_cache:capacity() + rpc_cache_short:capacity()) / 1024 / 1024 * 100) / 100,
            cache_performance = cache_performance,
            hit_rates = {
                permanent_hit_rate = math.floor(hit_rate_permanent * 100) / 100,
                short_hit_rate = math.floor(hit_rate_short * 100) / 100,
                total_hit_rate = math.floor(hit_rate_total * 100) / 100
            }
        }
        
        -- Set response headers
        ngx.header["Content-Type"] = "application/json"
        ngx.header["Cache-Control"] = "no-cache"
        
        -- Output JSON
        ngx.say(json.encode(stats))
    }
}

# Prometheus-compatible cache metrics endpoint - only accessible from internal networks
location /metrics/cache {
    # Allow access only from Docker internal networks and localhost
    allow 172.16.0.0/12;  # Docker networks
    allow 10.0.0.0/8;     # Private networks
    allow 127.0.0.1;      # Localhost
    deny all;             # Deny everything else
    
    access_log off;
    content_by_lua_block {
        -- Get cache dictionaries
        local rpc_cache = ngx.shared.rpc_cache
        local rpc_cache_short = ngx.shared.rpc_cache_short
        local providers = ngx.shared.providers
        local jwt_tokens = ngx.shared.jwt_tokens
        
        -- Helper function to get cache metrics
        local function cache_metrics(cache_dict, cache_type)
            local capacity = cache_dict:capacity()
            local free_space = cache_dict:free_space()
            local used_space = capacity - free_space
            local usage_percent = used_space / capacity * 100
            
            return string.format([[
# HELP nginx_cache_capacity_bytes Total cache capacity in bytes
# TYPE nginx_cache_capacity_bytes gauge
nginx_cache_capacity_bytes{cache_type="%s"} %d

# HELP nginx_cache_used_bytes Used cache space in bytes
# TYPE nginx_cache_used_bytes gauge
nginx_cache_used_bytes{cache_type="%s"} %d

# HELP nginx_cache_free_bytes Free cache space in bytes
# TYPE nginx_cache_free_bytes gauge
nginx_cache_free_bytes{cache_type="%s"} %d

# HELP nginx_cache_usage_percent Cache usage percentage
# TYPE nginx_cache_usage_percent gauge
nginx_cache_usage_percent{cache_type="%s"} %.2f
]], cache_type, capacity, cache_type, used_space, cache_type, free_space, cache_type, usage_percent)
        end
        
        -- Set response headers
        ngx.header["Content-Type"] = "text/plain; version=0.0.4"
        ngx.header["Cache-Control"] = "no-cache"
        
        -- Output Prometheus metrics
        ngx.print(cache_metrics(rpc_cache, "permanent"))
        ngx.print(cache_metrics(rpc_cache_short, "short"))
        ngx.print(cache_metrics(providers, "providers"))
        ngx.print(cache_metrics(jwt_tokens, "jwt_tokens"))
        
        -- Total metrics
        local total_capacity = rpc_cache:capacity() + rpc_cache_short:capacity()
        local total_used = (rpc_cache:capacity() - rpc_cache:free_space()) + (rpc_cache_short:capacity() - rpc_cache_short:free_space())
        
        ngx.print(string.format([[
# HELP nginx_cache_total_capacity_bytes Total cache capacity for RPC caches
# TYPE nginx_cache_total_capacity_bytes gauge
nginx_cache_total_capacity_bytes %d

# HELP nginx_cache_total_used_bytes Total used cache space for RPC caches
# TYPE nginx_cache_total_used_bytes gauge
nginx_cache_total_used_bytes %d
]], total_capacity, total_used))

        -- Cache hit/miss statistics
        local cache_stats_dict = ngx.shared.cache_stats
        
        -- Cache hits
        ngx.print(string.format([[
# HELP nginx_cache_hits_total Number of cache hits
# TYPE nginx_cache_hits_total counter
nginx_cache_hits_total{cache_type="permanent"} %d
nginx_cache_hits_total{cache_type="short"} %d
nginx_cache_hits_total{cache_type="all"} %d

# HELP nginx_cache_misses_total Number of cache misses
# TYPE nginx_cache_misses_total counter
nginx_cache_misses_total{cache_type="permanent"} %d
nginx_cache_misses_total{cache_type="short"} %d
nginx_cache_misses_total{cache_type="all"} %d

# HELP nginx_cache_requests_total Total number of cache requests
# TYPE nginx_cache_requests_total counter
nginx_cache_requests_total{cache_type="permanent"} %d
nginx_cache_requests_total{cache_type="short"} %d
nginx_cache_requests_total{cache_type="all"} %d

# HELP nginx_cache_hit_rate Cache hit rate percentage
# TYPE nginx_cache_hit_rate gauge
]], 
        cache_stats_dict:get("cache_hits_permanent") or 0,
        cache_stats_dict:get("cache_hits_short") or 0,
        cache_stats_dict:get("cache_hits_total") or 0,
        cache_stats_dict:get("cache_misses_permanent") or 0,
        cache_stats_dict:get("cache_misses_short") or 0,
        cache_stats_dict:get("cache_misses_total") or 0,
        cache_stats_dict:get("total_requests_permanent") or 0,
        cache_stats_dict:get("total_requests_short") or 0,
        cache_stats_dict:get("total_requests_all") or 0))
        
        -- Calculate and output hit rates
        local hits_perm = cache_stats_dict:get("cache_hits_permanent") or 0
        local total_perm = cache_stats_dict:get("total_requests_permanent") or 0
        local hits_short = cache_stats_dict:get("cache_hits_short") or 0
        local total_short = cache_stats_dict:get("total_requests_short") or 0
        local hits_all = cache_stats_dict:get("cache_hits_total") or 0
        local total_all = cache_stats_dict:get("total_requests_all") or 0
        
        local hit_rate_perm = total_perm > 0 and (hits_perm / total_perm * 100) or 0
        local hit_rate_short = total_short > 0 and (hits_short / total_short * 100) or 0
        local hit_rate_all = total_all > 0 and (hits_all / total_all * 100) or 0
        
        ngx.print(string.format([[nginx_cache_hit_rate{cache_type="permanent"} %.2f
nginx_cache_hit_rate{cache_type="short"} %.2f
nginx_cache_hit_rate{cache_type="all"} %.2f
]], hit_rate_perm, hit_rate_short, hit_rate_all))
    }
} 