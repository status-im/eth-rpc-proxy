// Code generated by MockGen. DO NOT EDIT.
// Source: cache_rules_classifier.go
//
// Generated by this command:
//
//	mockgen -package=mock -source=cache_rules_classifier.go -destination=mock/cache_rules_classifier.go
//

// Package mock is a generated GoMock package.
package mock

import (
	models "go-proxy-cache/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCacheRulesClassifier is a mock of CacheRulesClassifier interface.
type MockCacheRulesClassifier struct {
	ctrl     *gomock.Controller
	recorder *MockCacheRulesClassifierMockRecorder
	isgomock struct{}
}

// MockCacheRulesClassifierMockRecorder is the mock recorder for MockCacheRulesClassifier.
type MockCacheRulesClassifierMockRecorder struct {
	mock *MockCacheRulesClassifier
}

// NewMockCacheRulesClassifier creates a new mock instance.
func NewMockCacheRulesClassifier(ctrl *gomock.Controller) *MockCacheRulesClassifier {
	mock := &MockCacheRulesClassifier{ctrl: ctrl}
	mock.recorder = &MockCacheRulesClassifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheRulesClassifier) EXPECT() *MockCacheRulesClassifierMockRecorder {
	return m.recorder
}

// GetTtl mocks base method.
func (m *MockCacheRulesClassifier) GetTtl(chain, network string, request *models.JSONRPCRequest) models.CacheInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTtl", chain, network, request)
	ret0, _ := ret[0].(models.CacheInfo)
	return ret0
}

// GetTtl indicates an expected call of GetTtl.
func (mr *MockCacheRulesClassifierMockRecorder) GetTtl(chain, network, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTtl", reflect.TypeOf((*MockCacheRulesClassifier)(nil).GetTtl), chain, network, request)
}
