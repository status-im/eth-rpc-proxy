// Code generated by MockGen. DO NOT EDIT.
// Source: keydb_client.go
//
// Generated by this command:
//
//	mockgen -source=keydb_client.go -destination=mock/keydb_client.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	redis "github.com/go-redis/redis/v8"
	gomock "go.uber.org/mock/gomock"
)

// MockKeyDbClient is a mock of KeyDbClient interface.
type MockKeyDbClient struct {
	ctrl     *gomock.Controller
	recorder *MockKeyDbClientMockRecorder
	isgomock struct{}
}

// MockKeyDbClientMockRecorder is the mock recorder for MockKeyDbClient.
type MockKeyDbClientMockRecorder struct {
	mock *MockKeyDbClient
}

// NewMockKeyDbClient creates a new mock instance.
func NewMockKeyDbClient(ctrl *gomock.Controller) *MockKeyDbClient {
	mock := &MockKeyDbClient{ctrl: ctrl}
	mock.recorder = &MockKeyDbClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyDbClient) EXPECT() *MockKeyDbClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockKeyDbClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockKeyDbClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKeyDbClient)(nil).Close))
}

// Del mocks base method.
func (m *MockKeyDbClient) Del(ctx context.Context, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Del", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockKeyDbClientMockRecorder) Del(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockKeyDbClient)(nil).Del), varargs...)
}

// Get mocks base method.
func (m *MockKeyDbClient) Get(ctx context.Context, key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockKeyDbClientMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKeyDbClient)(nil).Get), ctx, key)
}

// Ping mocks base method.
func (m *MockKeyDbClient) Ping(ctx context.Context) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockKeyDbClientMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockKeyDbClient)(nil).Ping), ctx)
}

// Set mocks base method.
func (m *MockKeyDbClient) Set(ctx context.Context, key string, value any, expiration time.Duration) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiration)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockKeyDbClientMockRecorder) Set(ctx, key, value, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockKeyDbClient)(nil).Set), ctx, key, value, expiration)
}
