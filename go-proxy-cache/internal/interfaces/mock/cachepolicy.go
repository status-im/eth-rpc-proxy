// Code generated by MockGen. DO NOT EDIT.
// Source: cachepolicy.go
//
// Generated by this command:
//
//	mockgen -package=mock -source=cachepolicy.go -destination=mock/cachepolicy.go
//

// Package mock is a generated GoMock package.
package mock

import (
	interfaces "go-proxy-cache/internal/interfaces"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCachePolicy is a mock of CachePolicy interface.
type MockCachePolicy struct {
	ctrl     *gomock.Controller
	recorder *MockCachePolicyMockRecorder
	isgomock struct{}
}

// MockCachePolicyMockRecorder is the mock recorder for MockCachePolicy.
type MockCachePolicyMockRecorder struct {
	mock *MockCachePolicy
}

// NewMockCachePolicy creates a new mock instance.
func NewMockCachePolicy(ctrl *gomock.Controller) *MockCachePolicy {
	mock := &MockCachePolicy{ctrl: ctrl}
	mock.recorder = &MockCachePolicyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCachePolicy) EXPECT() *MockCachePolicyMockRecorder {
	return m.recorder
}

// Resolve mocks base method.
func (m *MockCachePolicy) Resolve(method string, params any) interfaces.TTL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", method, params)
	ret0, _ := ret[0].(interfaces.TTL)
	return ret0
}

// Resolve indicates an expected call of Resolve.
func (mr *MockCachePolicyMockRecorder) Resolve(method, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockCachePolicy)(nil).Resolve), method, params)
}
