// Code generated by MockGen. DO NOT EDIT.
// Source: cacherules.go
//
// Generated by this command:
//
//	mockgen -package=mock -source=cacherules.go -destination=mock/cacherules.go
//

// Package mock is a generated GoMock package.
package mock

import (
	interfaces "go-proxy-cache/internal/interfaces"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockCacheRulesLoader is a mock of CacheRulesLoader interface.
type MockCacheRulesLoader struct {
	ctrl     *gomock.Controller
	recorder *MockCacheRulesLoaderMockRecorder
	isgomock struct{}
}

// MockCacheRulesLoaderMockRecorder is the mock recorder for MockCacheRulesLoader.
type MockCacheRulesLoaderMockRecorder struct {
	mock *MockCacheRulesLoader
}

// NewMockCacheRulesLoader creates a new mock instance.
func NewMockCacheRulesLoader(ctrl *gomock.Controller) *MockCacheRulesLoader {
	mock := &MockCacheRulesLoader{ctrl: ctrl}
	mock.recorder = &MockCacheRulesLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheRulesLoader) EXPECT() *MockCacheRulesLoaderMockRecorder {
	return m.recorder
}

// LoadCacheRules mocks base method.
func (m *MockCacheRulesLoader) LoadCacheRules(rulesPath string) (interfaces.CacheRulesService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadCacheRules", rulesPath)
	ret0, _ := ret[0].(interfaces.CacheRulesService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadCacheRules indicates an expected call of LoadCacheRules.
func (mr *MockCacheRulesLoaderMockRecorder) LoadCacheRules(rulesPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCacheRules", reflect.TypeOf((*MockCacheRulesLoader)(nil).LoadCacheRules), rulesPath)
}

// MockCacheRulesService is a mock of CacheRulesService interface.
type MockCacheRulesService struct {
	ctrl     *gomock.Controller
	recorder *MockCacheRulesServiceMockRecorder
	isgomock struct{}
}

// MockCacheRulesServiceMockRecorder is the mock recorder for MockCacheRulesService.
type MockCacheRulesServiceMockRecorder struct {
	mock *MockCacheRulesService
}

// NewMockCacheRulesService creates a new mock instance.
func NewMockCacheRulesService(ctrl *gomock.Controller) *MockCacheRulesService {
	mock := &MockCacheRulesService{ctrl: ctrl}
	mock.recorder = &MockCacheRulesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheRulesService) EXPECT() *MockCacheRulesServiceMockRecorder {
	return m.recorder
}

// GetCacheInfo mocks base method.
func (m *MockCacheRulesService) GetCacheInfo(chain, network string, request *interfaces.JSONRPCRequest) (string, time.Duration) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCacheInfo", chain, network, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(time.Duration)
	return ret0, ret1
}

// GetCacheInfo indicates an expected call of GetCacheInfo.
func (mr *MockCacheRulesServiceMockRecorder) GetCacheInfo(chain, network, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCacheInfo", reflect.TypeOf((*MockCacheRulesService)(nil).GetCacheInfo), chain, network, request)
}

// Resolve mocks base method.
func (m *MockCacheRulesService) Resolve(method string, params any) interfaces.TTL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", method, params)
	ret0, _ := ret[0].(interfaces.TTL)
	return ret0
}

// Resolve indicates an expected call of Resolve.
func (mr *MockCacheRulesServiceMockRecorder) Resolve(method, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockCacheRulesService)(nil).Resolve), method, params)
}

// MockCacheRulesConfig is a mock of CacheRulesConfig interface.
type MockCacheRulesConfig struct {
	ctrl     *gomock.Controller
	recorder *MockCacheRulesConfigMockRecorder
	isgomock struct{}
}

// MockCacheRulesConfigMockRecorder is the mock recorder for MockCacheRulesConfig.
type MockCacheRulesConfigMockRecorder struct {
	mock *MockCacheRulesConfig
}

// NewMockCacheRulesConfig creates a new mock instance.
func NewMockCacheRulesConfig(ctrl *gomock.Controller) *MockCacheRulesConfig {
	mock := &MockCacheRulesConfig{ctrl: ctrl}
	mock.recorder = &MockCacheRulesConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheRulesConfig) EXPECT() *MockCacheRulesConfigMockRecorder {
	return m.recorder
}

// GetCacheRule mocks base method.
func (m *MockCacheRulesConfig) GetCacheRule(method string) (any, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCacheRule", method)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCacheRule indicates an expected call of GetCacheRule.
func (mr *MockCacheRulesConfigMockRecorder) GetCacheRule(method any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCacheRule", reflect.TypeOf((*MockCacheRulesConfig)(nil).GetCacheRule), method)
}

// GetTTLDefaults mocks base method.
func (m *MockCacheRulesConfig) GetTTLDefaults(key string) (map[string]any, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTTLDefaults", key)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetTTLDefaults indicates an expected call of GetTTLDefaults.
func (mr *MockCacheRulesConfigMockRecorder) GetTTLDefaults(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTTLDefaults", reflect.TypeOf((*MockCacheRulesConfig)(nil).GetTTLDefaults), key)
}

// Validate mocks base method.
func (m *MockCacheRulesConfig) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockCacheRulesConfigMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockCacheRulesConfig)(nil).Validate))
}
