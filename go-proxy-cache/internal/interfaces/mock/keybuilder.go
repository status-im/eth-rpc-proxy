// Code generated by MockGen. DO NOT EDIT.
// Source: keybuilder.go
//
// Generated by this command:
//
//	mockgen -package=mock -source=keybuilder.go -destination=mock/keybuilder.go
//

// Package mock is a generated GoMock package.
package mock

import (
	models "go-proxy-cache/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockKeyBuilder is a mock of KeyBuilder interface.
type MockKeyBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockKeyBuilderMockRecorder
	isgomock struct{}
}

// MockKeyBuilderMockRecorder is the mock recorder for MockKeyBuilder.
type MockKeyBuilderMockRecorder struct {
	mock *MockKeyBuilder
}

// NewMockKeyBuilder creates a new mock instance.
func NewMockKeyBuilder(ctrl *gomock.Controller) *MockKeyBuilder {
	mock := &MockKeyBuilder{ctrl: ctrl}
	mock.recorder = &MockKeyBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyBuilder) EXPECT() *MockKeyBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockKeyBuilder) Build(chain, network string, req *models.JSONRPCRequest) (string, uint32) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", chain, network, req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(uint32)
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockKeyBuilderMockRecorder) Build(chain, network, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockKeyBuilder)(nil).Build), chain, network, req)
}

// BuildBatch mocks base method.
func (m *MockKeyBuilder) BuildBatch(chain, network string, reqs []models.JSONRPCRequest) ([]string, []uint32) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildBatch", chain, network, reqs)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].([]uint32)
	return ret0, ret1
}

// BuildBatch indicates an expected call of BuildBatch.
func (mr *MockKeyBuilderMockRecorder) BuildBatch(chain, network, reqs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildBatch", reflect.TypeOf((*MockKeyBuilder)(nil).BuildBatch), chain, network, reqs)
}
