// Code generated by MockGen. DO NOT EDIT.
// Source: cache_rules_config.go
//
// Generated by this command:
//
//	mockgen -package=mock -source=cache_rules_config.go -destination=mock/cache_rules_config.go
//

// Package mock is a generated GoMock package.
package mock

import (
	models "go-proxy-cache/internal/models"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockCacheRulesConfig is a mock of CacheRulesConfig interface.
type MockCacheRulesConfig struct {
	ctrl     *gomock.Controller
	recorder *MockCacheRulesConfigMockRecorder
	isgomock struct{}
}

// MockCacheRulesConfigMockRecorder is the mock recorder for MockCacheRulesConfig.
type MockCacheRulesConfigMockRecorder struct {
	mock *MockCacheRulesConfig
}

// NewMockCacheRulesConfig creates a new mock instance.
func NewMockCacheRulesConfig(ctrl *gomock.Controller) *MockCacheRulesConfig {
	mock := &MockCacheRulesConfig{ctrl: ctrl}
	mock.recorder = &MockCacheRulesConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheRulesConfig) EXPECT() *MockCacheRulesConfigMockRecorder {
	return m.recorder
}

// GetCacheTypeForMethod mocks base method.
func (m *MockCacheRulesConfig) GetCacheTypeForMethod(method string) models.CacheType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCacheTypeForMethod", method)
	ret0, _ := ret[0].(models.CacheType)
	return ret0
}

// GetCacheTypeForMethod indicates an expected call of GetCacheTypeForMethod.
func (mr *MockCacheRulesConfigMockRecorder) GetCacheTypeForMethod(method any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCacheTypeForMethod", reflect.TypeOf((*MockCacheRulesConfig)(nil).GetCacheTypeForMethod), method)
}

// GetTtlForCacheType mocks base method.
func (m *MockCacheRulesConfig) GetTtlForCacheType(chain, network string, cacheType models.CacheType) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTtlForCacheType", chain, network, cacheType)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetTtlForCacheType indicates an expected call of GetTtlForCacheType.
func (mr *MockCacheRulesConfigMockRecorder) GetTtlForCacheType(chain, network, cacheType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTtlForCacheType", reflect.TypeOf((*MockCacheRulesConfig)(nil).GetTtlForCacheType), chain, network, cacheType)
}
